diff -Naur x265_4.1.old/doc/reST/cli.rst x265_4.1/doc/reST/cli.rst
--- x265_4.1.old/doc/reST/cli.rst	2024-11-22 13:07:34.000000000 +0100
+++ x265_4.1/doc/reST/cli.rst	2024-12-03 15:57:42.507869441 +0100
@@ -2369,6 +2369,9 @@
 	12. chroma-derived-nc
 	13. chroma-derived-c
 	14. ictcp
+	15. ipt-c2
+	16. ycgco-re
+	17. ycgco-ro
 
 .. option:: --chromaloc <0..5>
 
diff -Naur x265_4.1.old/source/CMakeLists.txt x265_4.1/source/CMakeLists.txt
--- x265_4.1.old/source/CMakeLists.txt	2024-12-03 15:56:09.116290212 +0100
+++ x265_4.1/source/CMakeLists.txt	2024-12-03 15:57:42.506869435 +0100
@@ -737,6 +737,9 @@
 	elseif(ARM64 OR CROSS_COMPILE_ARM64)
     # compile ARM64 arch asm files here
         enable_language(ASM)
+        if(APPLE)
+            set(ARM_ARGS ${ARM_ARGS} -arch ${CMAKE_OSX_ARCHITECTURES})
+        endif()
         foreach(ASM ${ARM_ASMS})
             set(ASM_SRC ${CMAKE_CURRENT_SOURCE_DIR}/common/aarch64/${ASM})
             list(APPEND ASM_SRCS ${ASM_SRC})
diff -Naur x265_4.1.old/source/common/frame.cpp x265_4.1/source/common/frame.cpp
--- x265_4.1.old/source/common/frame.cpp	2024-11-22 13:07:34.000000000 +0100
+++ x265_4.1/source/common/frame.cpp	2024-12-03 15:57:42.504869423 +0100
@@ -370,6 +370,11 @@
         delete[] m_userSEI.payloads;
     }
 
+    if (m_rpu.payloadSize)
+    {
+        delete[] m_rpu.payload;
+    }
+
     if (m_ctuInfo)
     {
         uint32_t widthInCU = (m_param->sourceWidth + m_param->maxCUSize - 1) >> m_param->maxLog2CUSize;
diff -Naur x265_4.1.old/source/common/param.cpp x265_4.1/source/common/param.cpp
--- x265_4.1.old/source/common/param.cpp	2024-11-22 13:07:34.000000000 +0100
+++ x265_4.1/source/common/param.cpp	2024-12-03 15:57:42.507869441 +0100
@@ -408,6 +408,7 @@
     param->preferredTransferCharacteristics = -1;
     param->pictureStructure = -1;
     param->bEmitCLL = 1;
+    param->bEmitAmbientViewingEnvironment = 0;
 
     param->bEnableFrameDuplication = 0;
     param->dupThreshold = 70;
@@ -1803,10 +1804,10 @@
           " smpte170m, smpte240m, linear, log100, log316, iec61966-2-4, bt1361e,"
           " iec61966-2-1, bt2020-10, bt2020-12, smpte-st-2084, smpte-st-428 or arib-std-b67");
     CHECK(param->vui.matrixCoeffs < 0
-          || param->vui.matrixCoeffs > 14
+          || param->vui.matrixCoeffs > 17
           || param->vui.matrixCoeffs == 3,
           "Matrix Coefficients must be unknown, bt709, fcc, bt470bg, smpte170m,"
-          " smpte240m, gbr, ycgco, bt2020nc, bt2020c, smpte-st-2085, chroma-nc, chroma-c or ictcp");
+          " smpte240m, gbr, ycgco, bt2020nc, bt2020c, smpte-st-2085, chroma-nc, chroma-c, ictcp, ipt-c2, ycgco-re, or ycgco-ro");
     CHECK(param->vui.chromaSampleLocTypeTopField < 0
           || param->vui.chromaSampleLocTypeTopField > 5,
           "Chroma Sample Location Type Top Field must be 0-5");
@@ -1963,6 +1964,7 @@
                      || param->bEmitIDRRecoverySEI
                    || !!param->interlaceMode
                      || param->preferredTransferCharacteristics > 1
+                     || param->bEmitAmbientViewingEnvironment
                      || strlen(param->toneMapFile)
                      || strlen(param->naluFile));
 
@@ -2910,6 +2912,10 @@
     dst->bEmitCLL = src->bEmitCLL;
     dst->maxCLL = src->maxCLL;
     dst->maxFALL = src->maxFALL;
+    dst->ambientIlluminance = src->ambientIlluminance;
+    dst->ambientLightX = src->ambientLightX;
+    dst->ambientLightY = src->ambientLightY;
+    dst->bEmitAmbientViewingEnvironment = src->bEmitAmbientViewingEnvironment;
     dst->log2MaxPocLsb = src->log2MaxPocLsb;
     dst->bEmitVUIHRDInfo = src->bEmitVUIHRDInfo;
     dst->bEmitVUITimingInfo = src->bEmitVUITimingInfo;
diff -Naur x265_4.1.old/source/common/threadpool.cpp x265_4.1/source/common/threadpool.cpp
--- x265_4.1.old/source/common/threadpool.cpp	2024-11-22 13:07:34.000000000 +0100
+++ x265_4.1/source/common/threadpool.cpp	2024-12-03 15:57:42.497869379 +0100
@@ -115,12 +115,6 @@
 {
     THREAD_NAME("Worker", m_id);
 
-#if _WIN32
-    SetThreadPriority(GetCurrentThread(), THREAD_PRIORITY_BELOW_NORMAL);
-#else
-    __attribute__((unused)) int val = nice(10);
-#endif
-
     m_pool.setCurrentThreadAffinity();
 
     sleepbitmap_t idBit = (sleepbitmap_t)1 << m_id;
@@ -667,10 +661,16 @@
     else if (cpuCount >= 32)
         p->frameNumThreads = (p->sourceHeight > 2000) ? 6 : 5; 
     else if (cpuCount >= 16)
-        p->frameNumThreads = 4; 
+#if MACOS && X265_ARCH_ARM64
+        p->frameNumThreads = 16;
+#else
+        p->frameNumThreads = 4;
+#endif
     else if (cpuCount >= 8)
 #if _WIN32 && X265_ARCH_ARM64
         p->frameNumThreads = cpuCount;
+#elif MACOS && X265_ARCH_ARM64
+        p->frameNumThreads = 8;
 #else
         p->frameNumThreads = 3;
 #endif
diff -Naur x265_4.1.old/source/encoder/encoder.cpp x265_4.1/source/encoder/encoder.cpp
--- x265_4.1.old/source/encoder/encoder.cpp	2024-11-22 13:07:34.000000000 +0100
+++ x265_4.1/source/encoder/encoder.cpp	2024-12-03 15:57:42.505869429 +0100
@@ -1102,6 +1102,12 @@
             else
                 input = pic_in->userSEI.payloads[i];
 
+            if (frame->m_userSEI.payloads[i].payload && (frame->m_userSEI.payloads[i].payloadSize < input.payloadSize))
+            {
+                delete[] frame->m_userSEI.payloads[i].payload;
+                frame->m_userSEI.payloads[i].payload = NULL;
+            }
+
             if (!frame->m_userSEI.payloads[i].payload)
                 frame->m_userSEI.payloads[i].payload = new uint8_t[input.payloadSize];
             memcpy(frame->m_userSEI.payloads[i].payload, input.payload, input.payloadSize);
@@ -1675,11 +1681,20 @@
         }
         copyUserSEIMessages(inFrame[0], inputPic[0]);
 
-        /*Copy Dolby Vision RPU from inputPic to frame*/
+        /* Copy Dolby Vision RPU from inputPic to frame. */
+        if (inFrame[0]->m_rpu.payload && inFrame[0]->m_rpu.payloadSize < inputPic[0]->rpu.payloadSize)
+        {
+            delete[] inFrame[0]->m_rpu.payload;
+            inFrame[0]->m_rpu.payload = NULL;
+        }
+
         if (inputPic[0]->rpu.payloadSize)
         {
+            if (inFrame[0]->m_rpu.payload == NULL)
+            {
+                inFrame[0]->m_rpu.payload = new uint8_t[inputPic[0]->rpu.payloadSize];
+            }
             inFrame[0]->m_rpu.payloadSize = inputPic[0]->rpu.payloadSize;
-            inFrame[0]->m_rpu.payload = new uint8_t[inputPic[0]->rpu.payloadSize];
             memcpy(inFrame[0]->m_rpu.payload, inputPic[0]->rpu.payload, inputPic[0]->rpu.payloadSize);
         }
 
@@ -3361,6 +3376,15 @@
         }
     }
 
+    if (m_param->bEmitAmbientViewingEnvironment)
+    {
+        SEIAmbientViewingEnvironment ambientsei;
+        ambientsei.ambientIlluminance = m_param->ambientIlluminance;
+        ambientsei.ambientLightX = m_param->ambientLightX;
+        ambientsei.ambientLightY = m_param->ambientLightY;
+        ambientsei.writeSEImessages(bs, m_sps, NAL_UNIT_PREFIX_SEI, list, m_param->bSingleSeiNal);
+    }
+
     if (m_param->bEmitInfoSEI)
     {
         char *opts = x265_param2string(m_param, m_sps.conformanceWindow.rightOffset, m_sps.conformanceWindow.bottomOffset);
diff -Naur x265_4.1.old/source/encoder/sei.h x265_4.1/source/encoder/sei.h
--- x265_4.1.old/source/encoder/sei.h	2024-11-22 13:07:34.000000000 +0100
+++ x265_4.1/source/encoder/sei.h	2024-12-03 15:57:42.501869404 +0100
@@ -638,6 +638,25 @@
     }
 };
 
+class SEIAmbientViewingEnvironment : public SEI
+{
+public:
+    SEIAmbientViewingEnvironment()
+    {
+        m_payloadType = AMBIENT_VIEWING_ENVIRONMENT;
+        m_payloadSize = 8;
+    }
+    uint32_t ambientIlluminance;
+    uint16_t ambientLightX;
+    uint16_t ambientLightY;
+    void writeSEI(const SPS&)
+    {
+        WRITE_CODE(ambientIlluminance, 32, "ambient_illuminance");
+        WRITE_CODE(ambientLightX,      16, "ambient_light_x");
+        WRITE_CODE(ambientLightY,      16, "ambient_light_y");
+    }
+};
+
 class SEIDecodedPictureHash : public SEI
 {
 public:
diff -Naur x265_4.1.old/source/x265cli.cpp x265_4.1/source/x265cli.cpp
--- x265_4.1.old/source/x265cli.cpp	2024-11-22 13:07:34.000000000 +0100
+++ x265_4.1/source/x265cli.cpp	2024-12-03 15:57:42.508869447 +0100
@@ -327,7 +327,7 @@
         H0("                                 smpte240m, linear, log100, log316, iec61966-2-4, bt1361e, iec61966-2-1,\n");
         H0("                                 bt2020-10, bt2020-12, smpte2084, smpte428, arib-std-b67. Default unknown\n");
         H1("   --colormatrix <string>        Specify color matrix setting from unknown, bt709, fcc, bt470bg, smpte170m,\n");
-        H1("                                 smpte240m, gbr, ycgco, bt2020nc, bt2020c, smpte2085, chroma-derived-nc, chroma-derived-c, ictcp. Default unknown\n");
+        H1("                                 smpte240m, gbr, ycgco, bt2020nc, bt2020c, smpte2085, chroma-derived-nc, chroma-derived-c, ictcp, ipt-c2, ycgco-re, ycgco-ro. Default unknown\n");
         H1("   --chromaloc <integer>         Specify chroma sample location (0 to 5). Default of %d\n", param->vui.chromaSampleLocTypeTopField);
         H0("   --master-display <string>     SMPTE ST 2086 master display color volume info SEI (HDR)\n");
         H0("                                    format: G(x,y)B(x,y)R(x,y)WP(x,y)L(max,min)\n");
diff -Naur x265_4.1.old/source/x265.h x265_4.1/source/x265.h
--- x265_4.1.old/source/x265.h	2024-11-22 13:07:34.000000000 +0100
+++ x265_4.1/source/x265.h	2024-12-03 15:57:42.508869447 +0100
@@ -376,6 +376,7 @@
     MASTERING_DISPLAY_INFO               = 137,
     CONTENT_LIGHT_LEVEL_INFO             = 144,
     ALTERNATIVE_TRANSFER_CHARACTERISTICS = 147,
+    AMBIENT_VIEWING_ENVIRONMENT          = 148,
     ALPHA_CHANNEL_INFO                   = 165,
     THREE_DIMENSIONAL_REFERENCE_DISPLAYS_INFO = 176,
     MULTIVIEW_SCENE_INFO                 = 178,
@@ -746,7 +747,7 @@
                                                     "log316", "iec61966-2-4", "bt1361e", "iec61966-2-1", "bt2020-10", "bt2020-12",
                                                     "smpte2084", "smpte428", "arib-std-b67", 0 };
 static const char * const x265_colmatrix_names[] = { "gbr", "bt709", "unknown", "", "fcc", "bt470bg", "smpte170m", "smpte240m",
-                                                     "ycgco", "bt2020nc", "bt2020c", "smpte2085", "chroma-derived-nc", "chroma-derived-c", "ictcp", 0 };
+                                                     "ycgco", "bt2020nc", "bt2020c", "smpte2085", "chroma-derived-nc", "chroma-derived-c", "ictcp", "ipt-c2", "ycgco-re", "ycgco-ro", 0 };
 static const char * const x265_sar_names[] = { "unknown", "1:1", "12:11", "10:11", "16:11", "40:33", "24:11", "20:11",
                                                "32:11", "80:33", "18:11", "15:11", "64:33", "160:99", "4:3", "3:2", "2:1", 0 };
 static const char * const x265_interlace_names[] = { "prog", "tff", "bff", 0 };
@@ -1962,6 +1963,11 @@
      * value to that value. */
     uint16_t maxLuma;
 
+    /* ISO/IEC 23008-2:2017, D.2.39 ambient viewing environment SEI message */
+    uint32_t ambientIlluminance;
+    uint16_t ambientLightX;
+    uint16_t ambientLightY;
+
     /* Maximum of the picture order count */
     int log2MaxPocLsb;
 
@@ -2173,6 +2179,9 @@
     /*Emit content light level info SEI*/
     int         bEmitCLL;
 
+    /* Emit ambient viewing environment SEI */
+    int         bEmitAmbientViewingEnvironment;
+
     /*
     * Signals picture structure SEI timing message for every frame
     * picture structure 7 is signalled for frame doubling
